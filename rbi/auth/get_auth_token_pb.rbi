# Code generated by protoc-gen-rbi. DO NOT EDIT.
# source: auth/get_auth_token.proto
# typed: strict

class Stately::Auth::GetAuthTokenRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig do
    params(
      access_key: T.nilable(String)
    ).void
  end
  def initialize(
    access_key: ""
  )
  end

  # access_key is an access key that has been added to an organization via
# stately.user.UserService.CreateAccessKey. It is a sensitive secret used
# for programmatic access to Stately APIs, equivalent to a
# username+password.
  sig { returns(String) }
  def access_key
  end

  # access_key is an access key that has been added to an organization via
# stately.user.UserService.CreateAccessKey. It is a sensitive secret used
# for programmatic access to Stately APIs, equivalent to a
# username+password.
  sig { params(value: String).void }
  def access_key=(value)
  end

  # access_key is an access key that has been added to an organization via
# stately.user.UserService.CreateAccessKey. It is a sensitive secret used
# for programmatic access to Stately APIs, equivalent to a
# username+password.
  sig { void }
  def clear_access_key
  end

  sig { returns(T.nilable(Symbol)) }
  def identity
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end

  sig { params(str: String).returns(Stately::Auth::GetAuthTokenRequest) }
  def self.decode(str)
  end

  sig { params(msg: Stately::Auth::GetAuthTokenRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Stately::Auth::GetAuthTokenRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Stately::Auth::GetAuthTokenRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end
end

class Stately::Auth::GetAuthTokenResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig do
    params(
      auth_token: T.nilable(String),
      expires_in_s: T.nilable(Integer)
    ).void
  end
  def initialize(
    auth_token: "",
    expires_in_s: 0
  )
  end

  # auth_token is the token that can be used to authenticate requests to the
# StatelyDB API.
  sig { returns(String) }
  def auth_token
  end

  # auth_token is the token that can be used to authenticate requests to the
# StatelyDB API.
  sig { params(value: String).void }
  def auth_token=(value)
  end

  # auth_token is the token that can be used to authenticate requests to the
# StatelyDB API.
  sig { void }
  def clear_auth_token
  end

  # expires_in_s is the duration in seconds that this access token is
# valid. After this time has passed, the access token will be rejected - you
# should refresh the token via another call to GetAuthToken before this
# happens.
  sig { returns(Integer) }
  def expires_in_s
  end

  # expires_in_s is the duration in seconds that this access token is
# valid. After this time has passed, the access token will be rejected - you
# should refresh the token via another call to GetAuthToken before this
# happens.
  sig { params(value: Integer).void }
  def expires_in_s=(value)
  end

  # expires_in_s is the duration in seconds that this access token is
# valid. After this time has passed, the access token will be rejected - you
# should refresh the token via another call to GetAuthToken before this
# happens.
  sig { void }
  def clear_expires_in_s
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end

  sig { params(str: String).returns(Stately::Auth::GetAuthTokenResponse) }
  def self.decode(str)
  end

  sig { params(msg: Stately::Auth::GetAuthTokenResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Stately::Auth::GetAuthTokenResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Stately::Auth::GetAuthTokenResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end
end
