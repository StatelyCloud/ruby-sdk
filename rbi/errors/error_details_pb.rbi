# Code generated by protoc-gen-rbi. DO NOT EDIT.
# source: errors/error_details.proto
# typed: strict

# StatelyErrorDetails is a message containing detailed error information.
# This is returned from the Stately API via Connect error details:
#  https://connectrpc.com/docs/go/errors#error-details
# Note: As a customer, you should not need to handle this message directly unless writing
# a custom low-level SDK. Instead, language-specific SDKs will provide a more user-friendly
# error object that wraps this message.
class Stately::Errors::StatelyErrorDetails
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig do
    params(
      stately_code: T.nilable(String),
      message: T.nilable(String),
      upstream_cause: T.nilable(String),
      code: T.nilable(Integer)
    ).void
  end
  def initialize(
    stately_code: "",
    message: "",
    upstream_cause: "",
    code: 0
  )
  end

  # stately_code is the error code that was returned by the Stately API.
# The full list of codes is available at https://docs.stately.cloud/api/error-codes/
# and documentation on a specific code can be found at https://docs.stately.cloud/api/error-codes/#{stately_code}
  sig { returns(String) }
  def stately_code
  end

  # stately_code is the error code that was returned by the Stately API.
# The full list of codes is available at https://docs.stately.cloud/api/error-codes/
# and documentation on a specific code can be found at https://docs.stately.cloud/api/error-codes/#{stately_code}
  sig { params(value: String).void }
  def stately_code=(value)
  end

  # stately_code is the error code that was returned by the Stately API.
# The full list of codes is available at https://docs.stately.cloud/api/error-codes/
# and documentation on a specific code can be found at https://docs.stately.cloud/api/error-codes/#{stately_code}
  sig { void }
  def clear_stately_code
  end

  # message is a human-readable error message that can be displayed to the user that
# provides more context about the error.
  sig { returns(String) }
  def message
  end

  # message is a human-readable error message that can be displayed to the user that
# provides more context about the error.
  sig { params(value: String).void }
  def message=(value)
  end

  # message is a human-readable error message that can be displayed to the user that
# provides more context about the error.
  sig { void }
  def clear_message
  end

  # upstream_cause is additional information about the error that can be used to help debug the error,
# This field will only optionally be supplied by the Stately API.
# Note: This may row over as the error is passed through multiple services.
  sig { returns(String) }
  def upstream_cause
  end

  # upstream_cause is additional information about the error that can be used to help debug the error,
# This field will only optionally be supplied by the Stately API.
# Note: This may row over as the error is passed through multiple services.
  sig { params(value: String).void }
  def upstream_cause=(value)
  end

  # upstream_cause is additional information about the error that can be used to help debug the error,
# This field will only optionally be supplied by the Stately API.
# Note: This may row over as the error is passed through multiple services.
  sig { void }
  def clear_upstream_cause
  end

  # The Connect/gRPC code associated with this error. This generally isn't set,
# because the overall API response has an error code. But this can be used in
# the case that we're returning multiple different errors, or communicating
# errors across non-Connect APIs.
  sig { returns(Integer) }
  def code
  end

  # The Connect/gRPC code associated with this error. This generally isn't set,
# because the overall API response has an error code. But this can be used in
# the case that we're returning multiple different errors, or communicating
# errors across non-Connect APIs.
  sig { params(value: Integer).void }
  def code=(value)
  end

  # The Connect/gRPC code associated with this error. This generally isn't set,
# because the overall API response has an error code. But this can be used in
# the case that we're returning multiple different errors, or communicating
# errors across non-Connect APIs.
  sig { void }
  def clear_code
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end

  sig { params(str: String).returns(Stately::Errors::StatelyErrorDetails) }
  def self.decode(str)
  end

  sig { params(msg: Stately::Errors::StatelyErrorDetails).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Stately::Errors::StatelyErrorDetails) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Stately::Errors::StatelyErrorDetails, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end
end
