# Code generated by protoc-gen-rbi. DO NOT EDIT.
# source: db/scan_root_paths.proto
# typed: strict

class Stately::Db::ScanRootPathsRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig do
    params(
      store_id: T.nilable(Integer),
      limit: T.nilable(Integer),
      pagination_token: T.nilable(String),
      schema_version_id: T.nilable(Integer),
      schema_id: T.nilable(Integer)
    ).void
  end
  def initialize(
    store_id: 0,
    limit: 0,
    pagination_token: "",
    schema_version_id: 0,
    schema_id: 0
  )
  end

  # store_id is a globally unique Store ID, which can be looked up from the
# console or CLI.
  sig { returns(Integer) }
  def store_id
  end

  # store_id is a globally unique Store ID, which can be looked up from the
# console or CLI.
  sig { params(value: Integer).void }
  def store_id=(value)
  end

  # store_id is a globally unique Store ID, which can be looked up from the
# console or CLI.
  sig { void }
  def clear_store_id
  end

  # Limit sets an upper bound on how many root paths to return.
  sig { returns(Integer) }
  def limit
  end

  # Limit sets an upper bound on how many root paths to return.
  sig { params(value: Integer).void }
  def limit=(value)
  end

  # Limit sets an upper bound on how many root paths to return.
  sig { void }
  def clear_limit
  end

  # pagination_token is an optional token to continue retrieving the next page of results.
# This value must be read from a ScanRootPathsResponse and passed with a clone of the
# previous request to fetch the next page of data
  sig { returns(String) }
  def pagination_token
  end

  # pagination_token is an optional token to continue retrieving the next page of results.
# This value must be read from a ScanRootPathsResponse and passed with a clone of the
# previous request to fetch the next page of data
  sig { params(value: String).void }
  def pagination_token=(value)
  end

  # pagination_token is an optional token to continue retrieving the next page of results.
# This value must be read from a ScanRootPathsResponse and passed with a clone of the
# previous request to fetch the next page of data
  sig { void }
  def clear_pagination_token
  end

  # schema_version_id is the version of the schema to base all queries on.
  sig { returns(Integer) }
  def schema_version_id
  end

  # schema_version_id is the version of the schema to base all queries on.
  sig { params(value: Integer).void }
  def schema_version_id=(value)
  end

  # schema_version_id is the version of the schema to base all queries on.
  sig { void }
  def clear_schema_version_id
  end

  # schema_id refers to the schema to use for this operation.
# If the store_id does not have a schema with this ID, the operation will
# error with SchemaNotFound error. You should not have to set this manually
# as your generated SDK should know its schema and wire this in for you.
  sig { returns(Integer) }
  def schema_id
  end

  # schema_id refers to the schema to use for this operation.
# If the store_id does not have a schema with this ID, the operation will
# error with SchemaNotFound error. You should not have to set this manually
# as your generated SDK should know its schema and wire this in for you.
  sig { params(value: Integer).void }
  def schema_id=(value)
  end

  # schema_id refers to the schema to use for this operation.
# If the store_id does not have a schema with this ID, the operation will
# error with SchemaNotFound error. You should not have to set this manually
# as your generated SDK should know its schema and wire this in for you.
  sig { void }
  def clear_schema_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end

  sig { params(str: String).returns(Stately::Db::ScanRootPathsRequest) }
  def self.decode(str)
  end

  sig { params(msg: Stately::Db::ScanRootPathsRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Stately::Db::ScanRootPathsRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Stately::Db::ScanRootPathsRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end
end

class Stately::Db::ScanRootPathsResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig do
    params(
      results: T.nilable(T::Array[T.nilable(Stately::Db::ScanRootPathResult)]),
      pagination_token: T.nilable(String)
    ).void
  end
  def initialize(
    results: [],
    pagination_token: ""
  )
  end

  # results is a list that contains one entry for each root path that was found.
  sig { returns(T::Array[T.nilable(Stately::Db::ScanRootPathResult)]) }
  def results
  end

  # results is a list that contains one entry for each root path that was found.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def results=(value)
  end

  # results is a list that contains one entry for each root path that was found.
  sig { void }
  def clear_results
  end

  # This field is optional and will be set if there are more query results to fetch.
# To fetch the next page of results you must make the exact same ScanRootPathsRequest as before
# but set ScanRootPathsRequest.pagination_token to the value returned here.
  sig { returns(String) }
  def pagination_token
  end

  # This field is optional and will be set if there are more query results to fetch.
# To fetch the next page of results you must make the exact same ScanRootPathsRequest as before
# but set ScanRootPathsRequest.pagination_token to the value returned here.
  sig { params(value: String).void }
  def pagination_token=(value)
  end

  # This field is optional and will be set if there are more query results to fetch.
# To fetch the next page of results you must make the exact same ScanRootPathsRequest as before
# but set ScanRootPathsRequest.pagination_token to the value returned here.
  sig { void }
  def clear_pagination_token
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end

  sig { params(str: String).returns(Stately::Db::ScanRootPathsResponse) }
  def self.decode(str)
  end

  sig { params(msg: Stately::Db::ScanRootPathsResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Stately::Db::ScanRootPathsResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Stately::Db::ScanRootPathsResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end
end

class Stately::Db::ScanRootPathResult
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig do
    params(
      key_path: T.nilable(String)
    ).void
  end
  def initialize(
    key_path: ""
  )
  end

  # key_path is a single root key path. Users can Query by this root path to
# get all of the items under it.
  sig { returns(String) }
  def key_path
  end

  # key_path is a single root key path. Users can Query by this root path to
# get all of the items under it.
  sig { params(value: String).void }
  def key_path=(value)
  end

  # key_path is a single root key path. Users can Query by this root path to
# get all of the items under it.
  sig { void }
  def clear_key_path
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end

  sig { params(str: String).returns(Stately::Db::ScanRootPathResult) }
  def self.decode(str)
  end

  sig { params(msg: Stately::Db::ScanRootPathResult).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Stately::Db::ScanRootPathResult) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Stately::Db::ScanRootPathResult, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end
end
