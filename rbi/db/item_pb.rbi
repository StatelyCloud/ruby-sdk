# Code generated by protoc-gen-rbi. DO NOT EDIT.
# source: db/item.proto
# typed: strict

# Item represents data stored in StatelyDB.
class Stately::Db::Item
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig do
    params(
      item_type: T.nilable(String),
      proto: T.nilable(String),
      json: T.nilable(Google::Protobuf::Struct)
    ).void
  end
  def initialize(
    item_type: "",
    proto: "",
    json: nil
  )
  end

  # item_type is the schema type of the item. It must correspond to one of the
# schema's `itemType` declarations.
  sig { returns(String) }
  def item_type
  end

  # item_type is the schema type of the item. It must correspond to one of the
# schema's `itemType` declarations.
  sig { params(value: String).void }
  def item_type=(value)
  end

  # item_type is the schema type of the item. It must correspond to one of the
# schema's `itemType` declarations.
  sig { void }
  def clear_item_type
  end

  # proto is a serialized binary proto message, following the schema for this
# item type. Clients will need to map the item_type to a protobuf message
# descriptor to be able to unmarshal this.
  sig { returns(String) }
  def proto
  end

  # proto is a serialized binary proto message, following the schema for this
# item type. Clients will need to map the item_type to a protobuf message
# descriptor to be able to unmarshal this.
  sig { params(value: String).void }
  def proto=(value)
  end

  # proto is a serialized binary proto message, following the schema for this
# item type. Clients will need to map the item_type to a protobuf message
# descriptor to be able to unmarshal this.
  sig { void }
  def clear_proto
  end

  # json is the JSON representation of the item's payload, as an alternative
# to the binary proto representation. It exists only to support clients
# that speak the Connect-JSON protocol. Using google.protobuf.Struct means
# the JSON is embedded inline instead of being a string, and most languages
# should have special support for it.
  sig { returns(T.nilable(Google::Protobuf::Struct)) }
  def json
  end

  # json is the JSON representation of the item's payload, as an alternative
# to the binary proto representation. It exists only to support clients
# that speak the Connect-JSON protocol. Using google.protobuf.Struct means
# the JSON is embedded inline instead of being a string, and most languages
# should have special support for it.
  sig { params(value: T.nilable(Google::Protobuf::Struct)).void }
  def json=(value)
  end

  # json is the JSON representation of the item's payload, as an alternative
# to the binary proto representation. It exists only to support clients
# that speak the Connect-JSON protocol. Using google.protobuf.Struct means
# the JSON is embedded inline instead of being a string, and most languages
# should have special support for it.
  sig { void }
  def clear_json
  end

  sig { returns(T.nilable(Symbol)) }
  def payload
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end

  sig { params(str: String).returns(Stately::Db::Item) }
  def self.decode(str)
  end

  sig { params(msg: Stately::Db::Item).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Stately::Db::Item) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Stately::Db::Item, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end
end
