# Code generated by protoc-gen-rbi. DO NOT EDIT.
# source: db/get.proto
# typed: strict

class Stately::Db::GetRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig do
    params(
      store_id: T.nilable(Integer),
      gets: T.nilable(T::Array[T.nilable(Stately::Db::GetItem)]),
      allow_stale: T.nilable(T::Boolean),
      schema_version_id: T.nilable(Integer),
      schema_id: T.nilable(Integer)
    ).void
  end
  def initialize(
    store_id: 0,
    gets: [],
    allow_stale: false,
    schema_version_id: 0,
    schema_id: 0
  )
  end

  # store_id is a globally unique Store ID, which can be looked up from the
# console or CLI.
  sig { returns(Integer) }
  def store_id
  end

  # store_id is a globally unique Store ID, which can be looked up from the
# console or CLI.
  sig { params(value: Integer).void }
  def store_id=(value)
  end

  # store_id is a globally unique Store ID, which can be looked up from the
# console or CLI.
  sig { void }
  def clear_store_id
  end

  # key paths to of each item to get.
  sig { returns(T::Array[T.nilable(Stately::Db::GetItem)]) }
  def gets
  end

  # key paths to of each item to get.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def gets=(value)
  end

  # key paths to of each item to get.
  sig { void }
  def clear_gets
  end

  # allow_stale indicates that you're okay with getting a slightly stale item -
# that is, if you had just changed an item and then call GetItem, you might
# get the old version of the item. This can result in improved performance,
# availability, and cost.
  sig { returns(T::Boolean) }
  def allow_stale
  end

  # allow_stale indicates that you're okay with getting a slightly stale item -
# that is, if you had just changed an item and then call GetItem, you might
# get the old version of the item. This can result in improved performance,
# availability, and cost.
  sig { params(value: T::Boolean).void }
  def allow_stale=(value)
  end

  # allow_stale indicates that you're okay with getting a slightly stale item -
# that is, if you had just changed an item and then call GetItem, you might
# get the old version of the item. This can result in improved performance,
# availability, and cost.
  sig { void }
  def clear_allow_stale
  end

  # schema_version_id is the version of the store's schema to use to interpret
# items. If there is no version with this ID, the operation will error with
# SchemaVersionNotFound error. You should not have to set this manually as
# your generated SDK should know its schema version and wire this in for you.
  sig { returns(Integer) }
  def schema_version_id
  end

  # schema_version_id is the version of the store's schema to use to interpret
# items. If there is no version with this ID, the operation will error with
# SchemaVersionNotFound error. You should not have to set this manually as
# your generated SDK should know its schema version and wire this in for you.
  sig { params(value: Integer).void }
  def schema_version_id=(value)
  end

  # schema_version_id is the version of the store's schema to use to interpret
# items. If there is no version with this ID, the operation will error with
# SchemaVersionNotFound error. You should not have to set this manually as
# your generated SDK should know its schema version and wire this in for you.
  sig { void }
  def clear_schema_version_id
  end

  # schema_id refers to the schema to use for this operation.
# If the store_id does not have a schema with this ID, the operation will
# error with SchemaNotFound error. You should not have to set this manually
# as your generated SDK should know its schema and wire this in for you.
  sig { returns(Integer) }
  def schema_id
  end

  # schema_id refers to the schema to use for this operation.
# If the store_id does not have a schema with this ID, the operation will
# error with SchemaNotFound error. You should not have to set this manually
# as your generated SDK should know its schema and wire this in for you.
  sig { params(value: Integer).void }
  def schema_id=(value)
  end

  # schema_id refers to the schema to use for this operation.
# If the store_id does not have a schema with this ID, the operation will
# error with SchemaNotFound error. You should not have to set this manually
# as your generated SDK should know its schema and wire this in for you.
  sig { void }
  def clear_schema_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end

  sig { params(str: String).returns(Stately::Db::GetRequest) }
  def self.decode(str)
  end

  sig { params(msg: Stately::Db::GetRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Stately::Db::GetRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Stately::Db::GetRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end
end

class Stately::Db::GetItem
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig do
    params(
      key_path: T.nilable(String)
    ).void
  end
  def initialize(
    key_path: ""
  )
  end

  # key_path is the full path to the item. See Item#key_path for more details.
  sig { returns(String) }
  def key_path
  end

  # key_path is the full path to the item. See Item#key_path for more details.
  sig { params(value: String).void }
  def key_path=(value)
  end

  # key_path is the full path to the item. See Item#key_path for more details.
  sig { void }
  def clear_key_path
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end

  sig { params(str: String).returns(Stately::Db::GetItem) }
  def self.decode(str)
  end

  sig { params(msg: Stately::Db::GetItem).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Stately::Db::GetItem) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Stately::Db::GetItem, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end
end

class Stately::Db::GetResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig do
    params(
      items: T.nilable(T::Array[T.nilable(Stately::Db::Item)])
    ).void
  end
  def initialize(
    items: []
  )
  end

  # results is a list that contains one entry for each Item that was found.
  sig { returns(T::Array[T.nilable(Stately::Db::Item)]) }
  def items
  end

  # results is a list that contains one entry for each Item that was found.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def items=(value)
  end

  # results is a list that contains one entry for each Item that was found.
  sig { void }
  def clear_items
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end

  sig { params(str: String).returns(Stately::Db::GetResponse) }
  def self.decode(str)
  end

  sig { params(msg: Stately::Db::GetResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Stately::Db::GetResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Stately::Db::GetResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end
end
