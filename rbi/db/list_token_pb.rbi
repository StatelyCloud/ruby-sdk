# Code generated by protoc-gen-rbi. DO NOT EDIT.
# source: db/list_token.proto
# typed: strict

# ListToken is an opaque token that can be used to continue (paginate) or sync
# results from a previous List operation.
class Stately::Db::ListToken
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig do
    params(
      token_data: T.nilable(String),
      can_continue: T.nilable(T::Boolean),
      can_sync: T.nilable(T::Boolean),
      schema_version_id: T.nilable(Integer)
    ).void
  end
  def initialize(
    token_data: "",
    can_continue: false,
    can_sync: false,
    schema_version_id: 0
  )
  end

  # token_data will always be returned, and can be used to expand the result
# set via ContinueList (if can_continue is true), or to get changed items
# within the result set via SyncList (if can_sync is true). The token_data
# itself is opaque and cannot be parsed or modified by clients.
  sig { returns(String) }
  def token_data
  end

  # token_data will always be returned, and can be used to expand the result
# set via ContinueList (if can_continue is true), or to get changed items
# within the result set via SyncList (if can_sync is true). The token_data
# itself is opaque and cannot be parsed or modified by clients.
  sig { params(value: String).void }
  def token_data=(value)
  end

  # token_data will always be returned, and can be used to expand the result
# set via ContinueList (if can_continue is true), or to get changed items
# within the result set via SyncList (if can_sync is true). The token_data
# itself is opaque and cannot be parsed or modified by clients.
  sig { void }
  def clear_token_data
  end

  # can_continue indicates that there are more results available by expanding
# the pagination window by calling ContinueList with this token.
  sig { returns(T::Boolean) }
  def can_continue
  end

  # can_continue indicates that there are more results available by expanding
# the pagination window by calling ContinueList with this token.
  sig { params(value: T::Boolean).void }
  def can_continue=(value)
  end

  # can_continue indicates that there are more results available by expanding
# the pagination window by calling ContinueList with this token.
  sig { void }
  def clear_can_continue
  end

  # can_sync indicates that you could call SyncList with this token later to
# get updated items. This is determined by the type of store you're listing
# from.
  sig { returns(T::Boolean) }
  def can_sync
  end

  # can_sync indicates that you could call SyncList with this token later to
# get updated items. This is determined by the type of store you're listing
# from.
  sig { params(value: T::Boolean).void }
  def can_sync=(value)
  end

  # can_sync indicates that you could call SyncList with this token later to
# get updated items. This is determined by the type of store you're listing
# from.
  sig { void }
  def clear_can_sync
  end

  # schema_version_id represents the version of the schema that was used to
# generate token_data. For ContinueList calls, you must ensure the client's
# schema version and this field are the same. A mismatch between the two
# will result in a SchemaVersionMismatch error. For SyncList calls, you
# only need to ensure you handle Reset events correctly by clearing your
# local state and consuming a new list of items as Stately will handle
# re-send items in the correct version along with a new token at the end.
  sig { returns(Integer) }
  def schema_version_id
  end

  # schema_version_id represents the version of the schema that was used to
# generate token_data. For ContinueList calls, you must ensure the client's
# schema version and this field are the same. A mismatch between the two
# will result in a SchemaVersionMismatch error. For SyncList calls, you
# only need to ensure you handle Reset events correctly by clearing your
# local state and consuming a new list of items as Stately will handle
# re-send items in the correct version along with a new token at the end.
  sig { params(value: Integer).void }
  def schema_version_id=(value)
  end

  # schema_version_id represents the version of the schema that was used to
# generate token_data. For ContinueList calls, you must ensure the client's
# schema version and this field are the same. A mismatch between the two
# will result in a SchemaVersionMismatch error. For SyncList calls, you
# only need to ensure you handle Reset events correctly by clearing your
# local state and consuming a new list of items as Stately will handle
# re-send items in the correct version along with a new token at the end.
  sig { void }
  def clear_schema_version_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end

  sig { params(str: String).returns(Stately::Db::ListToken) }
  def self.decode(str)
  end

  sig { params(msg: Stately::Db::ListToken).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Stately::Db::ListToken) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Stately::Db::ListToken, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end
end
