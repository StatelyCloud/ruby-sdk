# Code generated by protoc-gen-rbi. DO NOT EDIT.
# source: db/delete.proto
# typed: strict

class Stately::Db::DeleteRequest
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig do
    params(
      store_id: T.nilable(Integer),
      deletes: T.nilable(T::Array[T.nilable(Stately::Db::DeleteItem)]),
      schema_version_id: T.nilable(Integer),
      schema_id: T.nilable(Integer)
    ).void
  end
  def initialize(
    store_id: 0,
    deletes: [],
    schema_version_id: 0,
    schema_id: 0
  )
  end

  # store_id is a globally unique Store ID, which can be looked up from the
# console or CLI.
  sig { returns(Integer) }
  def store_id
  end

  # store_id is a globally unique Store ID, which can be looked up from the
# console or CLI.
  sig { params(value: Integer).void }
  def store_id=(value)
  end

  # store_id is a globally unique Store ID, which can be looked up from the
# console or CLI.
  sig { void }
  def clear_store_id
  end

  # deletes is up to 50 items to be deleted from the Group.
  sig { returns(T::Array[T.nilable(Stately::Db::DeleteItem)]) }
  def deletes
  end

  # deletes is up to 50 items to be deleted from the Group.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def deletes=(value)
  end

  # deletes is up to 50 items to be deleted from the Group.
  sig { void }
  def clear_deletes
  end

  # schema_version_id refers to the item version to delete from.
#
# If the store's schema does not have this version, the operation
# will error with SchemaVersionNotFound error. You should not have to
# set this manually as your generated SDK should know its schema version
# and wire this in for you.
  sig { returns(Integer) }
  def schema_version_id
  end

  # schema_version_id refers to the item version to delete from.
#
# If the store's schema does not have this version, the operation
# will error with SchemaVersionNotFound error. You should not have to
# set this manually as your generated SDK should know its schema version
# and wire this in for you.
  sig { params(value: Integer).void }
  def schema_version_id=(value)
  end

  # schema_version_id refers to the item version to delete from.
#
# If the store's schema does not have this version, the operation
# will error with SchemaVersionNotFound error. You should not have to
# set this manually as your generated SDK should know its schema version
# and wire this in for you.
  sig { void }
  def clear_schema_version_id
  end

  # schema_id refers to the schema to use for this operation.
# If the store_id does not have a schema with this ID, the operation will
# error with SchemaNotFound error. You should not have to set this manually
# as your generated SDK should know its schema and wire this in for you.
  sig { returns(Integer) }
  def schema_id
  end

  # schema_id refers to the schema to use for this operation.
# If the store_id does not have a schema with this ID, the operation will
# error with SchemaNotFound error. You should not have to set this manually
# as your generated SDK should know its schema and wire this in for you.
  sig { params(value: Integer).void }
  def schema_id=(value)
  end

  # schema_id refers to the schema to use for this operation.
# If the store_id does not have a schema with this ID, the operation will
# error with SchemaNotFound error. You should not have to set this manually
# as your generated SDK should know its schema and wire this in for you.
  sig { void }
  def clear_schema_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end

  sig { params(str: String).returns(Stately::Db::DeleteRequest) }
  def self.decode(str)
  end

  sig { params(msg: Stately::Db::DeleteRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Stately::Db::DeleteRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Stately::Db::DeleteRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end
end

class Stately::Db::DeleteItem
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig do
    params(
      key_path: T.nilable(String)
    ).void
  end
  def initialize(
    key_path: ""
  )
  end

  # key_path is the full path to the item. See Item#key_path for more details.
  sig { returns(String) }
  def key_path
  end

  # key_path is the full path to the item. See Item#key_path for more details.
  sig { params(value: String).void }
  def key_path=(value)
  end

  # key_path is the full path to the item. See Item#key_path for more details.
  sig { void }
  def clear_key_path
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end

  sig { params(str: String).returns(Stately::Db::DeleteItem) }
  def self.decode(str)
  end

  sig { params(msg: Stately::Db::DeleteItem).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Stately::Db::DeleteItem) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Stately::Db::DeleteItem, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end
end

class Stately::Db::DeleteResult
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig do
    params(
      key_path: T.nilable(String)
    ).void
  end
  def initialize(
    key_path: ""
  )
  end

  # The key_path of the item that was deleted.
  sig { returns(String) }
  def key_path
  end

  # The key_path of the item that was deleted.
  sig { params(value: String).void }
  def key_path=(value)
  end

  # The key_path of the item that was deleted.
  sig { void }
  def clear_key_path
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end

  sig { params(str: String).returns(Stately::Db::DeleteResult) }
  def self.decode(str)
  end

  sig { params(msg: Stately::Db::DeleteResult).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Stately::Db::DeleteResult) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Stately::Db::DeleteResult, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end
end

class Stately::Db::DeleteResponse
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig do
    params(
      results: T.nilable(T::Array[T.nilable(Stately::Db::DeleteResult)])
    ).void
  end
  def initialize(
    results: []
  )
  end

  # results is the result of each delete operation, whether it succeeded or failed.
  sig { returns(T::Array[T.nilable(Stately::Db::DeleteResult)]) }
  def results
  end

  # results is the result of each delete operation, whether it succeeded or failed.
  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def results=(value)
  end

  # results is the result of each delete operation, whether it succeeded or failed.
  sig { void }
  def clear_results
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end

  sig { params(str: String).returns(Stately::Db::DeleteResponse) }
  def self.decode(str)
  end

  sig { params(msg: Stately::Db::DeleteResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Stately::Db::DeleteResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Stately::Db::DeleteResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end
end
